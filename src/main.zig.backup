const std = @import("std");

const Core = struct {
    const Vec2 = .{ u32, u32 };
    const Node = union(enum) {
        internal: struct {
            /// Optional pointers to subnodes
            children: [4]?*Node,
            /// Mass of group
            mass: u16,
            /// Center of mass
            center: Vec2,
        },
        external: struct {
            mass: u16,
            radius: u16,
            // TODO: Color and other values
            position: Vec2,
        },
    };
};

const print = std.debug.print;

pub fn tt(i: i32) void {
    print("{}", .{i});
}
pub fn main() !void {
    // Prints to stderr (it's a shortcut based on `std.io.getStdErr()`)
    std.debug.print("All your {s} are belong to us.\n", .{"codebase"});

    // stdout is for the actual output of your application, for example if you
    // are implementing gzip, then only the compressed bytes should be sent to
    // stdout, not any debugging messages.
    const stdout_file = std.io.getStdOut().writer();
    var bw = std.io.bufferedWriter(stdout_file);
    const stdout = bw.writer();

    try stdout.print("Run `zig build test` to run the tests.\n", .{});

    try bw.flush(); // don't forget to flush!
}

test "simple test" {
    var list = std.ArrayList(i32).init(std.testing.allocator);
    defer list.deinit(); // try commenting this out and see if zig detects the memory leak!
    try list.append(42);
    try std.testing.expectEqual(@as(i32, 42), list.pop());
}
